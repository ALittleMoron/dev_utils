from typing import Any, Generic, Never, TypeVar

_T = TypeVar("_T")

class AbstractClassWithoutAbstractPropertiesWarning(Warning): ...

class _AbstractClassProperty(Generic[_T]):
    __repr_template: str = ...
    __name__: str
    __containing_klass_name__: str
    __propertytype_name__: str
    def __init__(self, propertytype: type[_T]) -> None: ...
    def __set_name__(self, containing_klass: type[Any], name: str) -> None: ...
    def raise_use(self, *args: Any, **kwargs: Any) -> Never: ...
    def raise_use_compare(self, other: Any) -> Never: ...
    def __getattr__(self, name: str) -> Never: ...
    def __setattr__(self, name: str, value: Any) -> Never: ...

    __hash__ = ...
    __ge__ = ...
    __str__ = ...

def abstract_class_property(propertytype: type[_T]) -> _T: ...

class Abstract:
    __skip_abstract_raise_error__: bool = ...
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
