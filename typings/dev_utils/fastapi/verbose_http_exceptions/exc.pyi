from collections.abc import Sequence
from string import Template
from typing import Any, NotRequired, Self, TypedDict

from fastapi import HTTPException

from dev_utils.core.abstract import Abstract

ABSTRACT_PROPERTY_DEFAULT_VALUE: str = ...
ABSTRACT_CLS_DEFAULT_VALUE: str = ...

class VerboseHTTPExceptionDict(TypedDict):
    code: str
    type: str
    message: str
    location: str | None
    attr: str | None
    nested_errors: NotRequired[list[VerboseHTTPExceptionDict]]

class BaseVerboseHTTPException(Abstract, HTTPException):
    status_code: int = ...
    code: str = ...
    type_: str = ...
    message: str = ...
    location: str | None = ...
    template: Template | str | None = ...
    attr: str | None = ...
    nested_errors: list[BaseVerboseHTTPException] | None = ...
    def __init__(
        self: Self,
        *nested_errors: BaseVerboseHTTPException,
        status_code: int | None = ...,
        code: str | None = ...,
        type_: str | None = ...,
        message: str | None = ...,
        location: str | None = ...,
        template: Template | str | None = ...,
        attr_name: str | None = ...,
        headers: dict[str, Any] | None = ...,
        **mapping: object,
    ) -> None: ...
    def from_template(self: Self, **mapping: object) -> Self: ...
    def with_attr(self: Self, attr_name: str) -> Self: ...
    def with_location(self: Self, location: str) -> Self: ...
    def with_nested_errors(
        self: Self,
        nested_errors: Sequence[BaseVerboseHTTPException],
    ) -> Self: ...
    def as_dict(
        self: Self,
        attr_name: str | None = ...,
        location: str | None = ...,
        nested_errors: Sequence[BaseVerboseHTTPException] | None = ...,
        **mapping: object,
    ) -> VerboseHTTPExceptionDict: ...

class NestedErrorsMainHTTPException(BaseVerboseHTTPException):
    __skip_abstract_raise_error__ = ...
    code = ...
    type_ = ...
    message = ...

class InfoVerboseHTTPException(BaseVerboseHTTPException):
    __skip_abstract_raise_error__ = ...
    status_code = ...
    code = ...
    type_ = ...

class SuccessVerboseHTTPException(BaseVerboseHTTPException):
    __skip_abstract_raise_error__ = ...
    status_code = ...
    code = ...
    type_ = ...

class RedirectVerboseHTTPException(BaseVerboseHTTPException):
    __skip_abstract_raise_error__ = ...
    status_code = ...
    code = ...
    type_ = ...

class ClientVerboseHTTPException(BaseVerboseHTTPException):
    status_code = ...
    code = ...
    type_ = ...
    message = ...
    template = ...

class RequestValidationVerboseHTTPException(BaseVerboseHTTPException):
    __skip_abstract_raise_error__ = ...
    status_code = ...
    code = ...

class ServerErrorVerboseHTTPException(BaseVerboseHTTPException):
    status_code = ...
    code = ...
    type_ = ...
    message = ...
    template = ...

class DatabaseErrorVerboseHTTPException(ServerErrorVerboseHTTPException):
    type_ = ...
    message = ...
    template = ...
