"""
This type stub file was generated by pyright.
"""

from abc import ABC
from collections.abc import Sequence
from logging import Logger
from pathlib import Path
from types import TracebackType
from typing import Generic, Self, TYPE_CHECKING, TypeVar
from sqlalchemy.engine import Engine
from sqlalchemy.ext.asyncio import AsyncEngine
from dev_utils.sqlalchemy.profiling.containers import QueryInfo

if TYPE_CHECKING: ...
T = TypeVar("T")

class BaseSQLAlchemyProfiler(ABC, Generic[T]):
    """Abstract base sqlalchemy profiling class.

    It is a generic class, so use it with typing. Generic uses in:

    * ``__init__``: self.collector - queue of ``<Generic>`` objects. For example, it could be
        queue of QueryInfo objects.
    * ``collect``: return value - Sequence of ``<Generic>``.
    """
    def __init__(
        self,
        engine: type[Engine] | Engine | AsyncEngine = ...,
        *,
        profiler_id: str | None = ...,
        logger: Logger = ...,
        log_query_states: bool = ...,
    ) -> None: ...
    def start(self) -> None:
        """Start the profiling process.

        Add engine-level handlers from events, which will fill collector with data.
        """
        ...

    def stop(self) -> None:
        """Stop the profiling process.

        Remove engine-level handlers from events - no other data will be put in collector.
        """
        ...

    def __enter__(self) -> Self:
        """Enter of context manager.

        Start the profiler by executing ``self.start()`` method.
        """
        ...

    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc: BaseException | None,
        traceback: TracebackType | None,
    ) -> None:
        """Exit of context manager.

        Stop the profiler by executing ``self.stop()`` method.
        """
        ...

    def collect(self) -> Sequence[T]:
        """Collect all information from queue.

        Collect means "transform to list". You can override this method, if you want to return
        other type. Use self._result as return value and assign this attribute in profiling methods.
        """
        ...

    def report(self, stdout: str | Path | Logger | None = ...) -> None:
        """Make report about profiling."""
        ...

class SQLAlchemyQueryProfiler(BaseSQLAlchemyProfiler[QueryInfo]):
    """SQLAlchemy query profiler."""
    def report(self, stdout: str | Path | Logger | None = ...) -> None: ...

class SQLAlchemyQueryCounter(BaseSQLAlchemyProfiler[int]):
    """SQLAlchemy query counter."""
    def collect(self) -> int: ...
    def start(self) -> None: ...
